#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.3.1
# In conjunction with Tcl version 8.6
#    Oct 24, 2014 09:16:25 PM
import sys
from PIL import Image, ImageTk

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('Matrix Ring Control')
    root.geometry('308x312+491+224')
    root.resizable(width=FALSE,height=FALSE)
    GUI_support.set_Tk_var()
    w = Matrix_Ring_Control (root)
    GUI_support.init(root, w)
    root.bind("<Prior>", GUI_support.usbResetRemote)
    root.bind("<Next>", GUI_support.CaptureRemote)
    root.mainloop()
    

w = None
def create_Matrix_Ring_Control (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('Matrix_Ring_Control')
    w.geometry('308x312+491+224')
    GUI_support.set_Tk_var()
    w_win = Matrix_Ring_Control (w)
    GUI_support.init(w, w_win, param)
    return w_win

def destroy_Matrix_Ring_Control ():
    global w
    w.destroy()
    w = None


class Matrix_Ring_Control:
    def __init__(self, master=None):
        
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI} -size 9 -weight normal -slant  " + \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background="#d9d9d9")
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)

        self.file = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="File")
        self.file.add_command(
                activebackground="#ffffff",
                activeforeground="#000000",
                background="#d9d9d9",
                command=GUI_support.destroy_window,
                font=font10,
                foreground="#000000",
                label="Exit")
        self.tools = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.tools,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Tools")
        self.tools.add_command(
                activebackground="#ffffff",
                activeforeground="#000000",
                background="#d9d9d9",
                command=GUI_support.usbReset,
                foreground="#000000",
                label="USB Reset")
        self.tools.add_command(
                activebackground="#ffffff",
                activeforeground="#000000",
                background="#d9d9d9",
                command=GUI_support.sysReboot,
                foreground="#000000",
                label="System Reboot")

        #Message Box
        self.Message2 = Message (master)
        self.Message2.place(relx=0.03,rely=0.87,relheight=0.1,relwidth=0.94)
        self.Message2.configure(anchor=W)
        self.Message2.configure(background="#d8d8d8")
        self.Message2.configure(foreground="#000000")
        self.Message2.configure(highlightbackground="#d9d9d9")
        self.Message2.configure(highlightcolor="black")
        self.Message2.configure(relief=SUNKEN)
        self.Message2.configure(text='''Message''')
        self.Message2.configure(textvariable=GUI_support.Msg)
        self.Message2.configure(width=290)

        #Exit Button
        self.Exit = ttk.Button (master)
        self.Exit.place(relx=0.78,rely=0.64,height=60,width=60)
        self.Exit.configure(command=GUI_support.destroy_window)
        self.Exit.configure(takefocus="")
        self.Exit.configure(text='''Exit''')
        self._img1 = ImageTk.PhotoImage(file="./exit.png")
        self.Exit.configure(image=self._img1)
        self.Exit.configure(cursor="hand2")
        self.Exit.bind('<Enter>',GUI_support.InExit)
        self.Exit.bind('<Leave>',GUI_support.Out)

        #Calibration Button
        self.Calibration = ttk.Button (master)
        self.Calibration.place(relx=0.26,rely=0.64,height=60,width=60)
        self.Calibration.configure(takefocus="")
        self.Calibration.configure(text='''Clibrate''')
        self._img2 = ImageTk.PhotoImage(file="./calib.png")
        self.Calibration.configure(image=self._img2)
        self.Calibration.configure(cursor="hand2")
        self.Calibration.configure(command=GUI_support.calibrate)
        self.Calibration.bind('<Enter>',GUI_support.InCal)
        self.Calibration.bind('<Leave>',GUI_support.Out)

        #Capture Button
        self.Camera = ttk.Button (master)
        self.Camera.place(relx=0.03,rely=0.03,height=180,width=290)
        self.Camera.configure(command=GUI_support.Captured)
        self.Camera.configure(takefocus="")
        self.Camera.configure(text='''Capture''')
        self._img3 = ImageTk.PhotoImage(file="./camera.png")
        self.Camera.configure(image=self._img3)
        self.Camera.configure(cursor="hand2")
        self.Camera.bind('<Enter>',GUI_support.InCam)
        self.Camera.bind('<Leave>',GUI_support.Out)

        #Configuration Button
        self.ConfigureButtn = ttk.Button (master)
        self.ConfigureButtn.place(relx=0.03,rely=0.64,height=60,width=60)
        self.ConfigureButtn.configure(takefocus="")
        self.ConfigureButtn.configure(text='''Configuraition''')
        self._img4 = ImageTk.PhotoImage(file="./sett.png")
        self.ConfigureButtn.configure(image=self._img4)
        self.ConfigureButtn.configure(cursor="hand2")
        self.ConfigureButtn.configure(command=GUI_support.Configure)
        self.ConfigureButtn.bind('<Enter>',GUI_support.InSet)
        self.ConfigureButtn.bind('<Leave>',GUI_support.Out)

        





if __name__ == '__main__':
    vp_start_gui()



