#! /usr/bin/env python
#
# Support module generated by PAGE version 4.3.1
# In conjunction with Tcl version 8.6
#    Oct 24, 2014 05:06:04 PM
#    Oct 24, 2014 05:36:15 PM


import sys
from socket import *
import RebootSys
import resetUSB
import Calibrate
import Configuration

stopIdle = None

#_-_-__-_-_-_-_-_-Network Configuration-_-_-_-_-_-_-_-_-_-_-_-_-_

BCAST_GRP = '192.168.0.255'
BCAST_PORT = 5007

sock = socket(AF_INET, SOCK_DGRAM)
sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
sock.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
sock.bind(('', BCAST_PORT))
#_-_-__-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_--_-_-_-_--_-_-_-_-_-_-_-_-_

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global Msg
    Msg = StringVar()

##def idle():
##        global stopIdle
##        #root.after(1000)
##        sock.sendto("idle", (BCAST_GRP, BCAST_PORT))
##        print 'idle sent'
##        if not stopIdle:
##            root.after(100,idle)

def calibrate():
        print ('Calibrate')
        w.Calibration.configure(state=DISABLED,cursor='arrow')
        Calibrate.create_Calibration_Mode (root,w)

def Configure():
        print ('configuration')
        w.ConfigureButtn.configure(state=DISABLED,cursor='arrow')
        Configuration.create_Camera_Configuration (root,w)

def sysReboot():
        RebootSys.create_System_Reboot(root)
        print "Reboot all"
        sock.sendto("reboot", (BCAST_GRP, BCAST_PORT)) #sending command Reboot    
        sys.stdout.flush()

def usbReset():
        resetUSB.create_USB_Reset(root)
        print "USB reset to all"
        sock.sendto("resetusb", (BCAST_GRP, BCAST_PORT)) #sending command USBReset
        sys.stdout.flush()

def Captured():
        global stopIdle
        print ('captured')
        sock.sendto("shoot", (BCAST_GRP, BCAST_PORT)) #sending command shoot
        w.Camera.configure(state=DISABLED)
        w.Camera.configure(cursor="arrow")
        root.after(9000,activateCapture)
##        stopIdle = 1
##        sys.stdout.flush()

def activateCapture():
##        global stopIdle
        w.Camera.configure(cursor="hand2")
        w.Camera.configure(state=ACTIVE)
##        stopIdle = 0
##        root.after(100,idle)

def InCal(self):
        Msg.set('Calibration Mode')
        print ('GUI_support.InCal')
        sys.stdout.flush()

def InCam(self):
        Msg.set('Capture Photo')
        print ('GUI_support.InCam')
        sys.stdout.flush()

def InExit(self):
        Msg.set('Quit Matrix Ring Control')
        print ('GUI_support.InExit')
        sys.stdout.flush()

def InSet(self):
        Msg.set('Configuration')
        print ('GUI_support.InSet')
        sys.stdout.flush()

def Out(self):
        Msg.set('    ')
        print ('GUI_support.Out')
        sys.stdout.flush()

def init(top, gui, arg=None):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window ():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None





